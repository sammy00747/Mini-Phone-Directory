{"version":3,"sources":["HomePage.js","AddSubscriber.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","togglePage","subscriberList","removeSubscriber","react_default","a","createElement","Button","color","onClick","Table","borderless","map","subscriber","index","key","name","phone","Component","nameInput","phoneInput","handleInputChange","addSubscriber","style","textDecoration","Form","Col","md","sm","xs","FormGroup","Label","for","Input","type","value","onChange","e","fontWeight","App","_this","obj","setState","prevState","concat","field","isNumber","arguments","length","undefined","target","replace","defineProperty","i","console","log","tempList","state","slice","pageTitle","isHomePage","pageContent","_this$state","src_HomePage","AddSubscriber","backgroundColor","height","width","display","alignItems","justifyContent","padding","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09193f77.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Table } from 'reactstrap';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { togglePage, subscriberList, removeSubscriber } = this.props;\r\n    return (\r\n      <div>\r\n        <Button color='success' onClick={() => togglePage()}>ADD</Button>\r\n        <Table borderless>\r\n          <thead>\r\n            <tr>\r\n              <th>NAME</th>\r\n              <th>PHONE</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {subscriberList.map((subscriber,index) => (\r\n              <tr key={index}>\r\n                <td>{subscriber.name}</td>\r\n                <td>{subscriber.phone}</td>\r\n                <td><Button color='danger' onClick={() => removeSubscriber(index)}>DELETE</Button></td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { togglePage, nameInput, phoneInput, handleInputChange, addSubscriber } = this.props;\r\n    return (\r\n      <div>\r\n        <Button color='link' style={{ textDecoration: 'none', color: 'black' }} onClick={() => togglePage()}>BACK</Button>\r\n        <Form>\r\n          <Col md={4} sm={8} xs={12}>\r\n            <FormGroup>\r\n              <Label for='name'>Name:</Label>\r\n              <Input type='text' name='name' value={nameInput} onChange={(e) => handleInputChange(e,'nameInput')} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='phone'>Phone:</Label>\r\n              <Input type='text' name='phone' value={phoneInput} onChange={(e) => handleInputChange(e,'phoneInput',true)} />\r\n            </FormGroup>\r\n          </Col>\r\n        </Form>\r\n        <p>\r\n          <span style={{ fontWeight: '500' }}>Subscriber to be added:</span>\r\n          <br />\r\n          Name: {nameInput}\r\n          <br />\r\n          Phone: {phoneInput}\r\n        </p>\r\n        <Button color='success' onClick={() => addSubscriber({ name: nameInput, phone: phoneInput })}>ADD</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport HomePage from './HomePage';\nimport AddSubscriber from './AddSubscriber'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isHomePage: true,\n      pageTitle: 'PHONE DIRECTORY',\n      subscriberList: [],\n      nameInput: '',\n      phoneInput: '',\n    }\n  }\n\n  addSubscriber = (obj) => {\n    this.setState(prevState => ({\n      subscriberList: prevState.subscriberList.concat(obj),\n      nameInput: '',\n      phoneInput: '',\n    }));\n    this.togglePage();\n    // console.log('hello!');\n  }\n\n  handleInputChange = (e,field,isNumber=false) => {\n    const { value } = e.target;\n    let result = (isNumber ? value.replace(/[0-9]/g,'') : value.replace(/[a-zA-Z0-9]/g,''));\n    if(result === '')\n      this.setState({[field]: value});\n  }\n\n  removeSubscriber = (i) => {\n    console.log(i);\n    let tempList = this.state.subscriberList;\n    this.setState({\n      subscriberList: tempList.slice(0,i).concat(tempList.slice(i+1,tempList.length))\n    });\n  }\n\n  togglePage = () => {\n    this.setState(prevState => ({\n      pageTitle: (prevState.isHomePage ? 'ADD SUBSCRIBER' : 'PHONE DIRECTORY'),\n      isHomePage: !prevState.isHomePage,\n    }));\n  }\n\n  pageContent = () => {\n    const {\n      isHomePage,\n      subscriberList,\n      nameInput,\n      phoneInput,\n    } = this.state;\n    if(isHomePage) {\n      return (\n        <HomePage\n          togglePage={this.togglePage}\n          subscriberList={subscriberList}\n          removeSubscriber={this.removeSubscriber}\n        />\n      );\n    }\n    else {\n      return (\n        <AddSubscriber\n          togglePage={this.togglePage}\n          addSubscriber={this.addSubscriber}\n          nameInput={nameInput}\n          phoneInput={phoneInput}\n          handleInputChange={this.handleInputChange}\n        />\n      )\n    }\n  }\n  \n  render() {\n    const { pageTitle } = this.state;\n    return (\n      <div>\n        <div style={{\n          color: 'white',\n          backgroundColor: 'black',\n          height: '50px',\n          width: '100vw',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n          <div>{pageTitle}</div>\n        </div>\n        <div style={{ padding: '1%', }}>\n          {this.pageContent()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}